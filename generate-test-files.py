import numpy as np
import itertools

r_type_np_impls = {
    'add':  np.add,
    'sub':  np.subtract,
    'and':  np.bitwise_and,
    'or':   np.bitwise_or,
    'xor':  np.bitwise_xor,
    'slt':  np.less,
    'sll':  np.left_shift,
    'sra':  np.right_shift
}

arg_types = {
    'add':  ['int32','int32'],
    'sub':  ['int32','int32'],
    'and':  ['int32','int32'],
    'or':   ['int32','int32'],
    'xor':  ['int32','int32'],
    'slt':  ['int32','int32'],
    'sll':  ['int32','uint5'],
    'sra':  ['int32','uint5'],
    'addi': ['int32','int12'],
    'andi': ['int32','int12'],
    'ori':  ['int32','int12'],
    'xori': ['int32','int12'],
    'slti': ['int32','uint5']
}

def dtype_info(dtype):
    unsigned = dtype[0] == 'u'
    return (unsigned, int(dtype.lstrip('uint' if unsigned else 'int')))

def edge_values(dtype):
    unsigned, bits = dtype_info(dtype)
    if unsigned:
        return [0, (1 << bits) - 1]
    else:
        return [0, -1, (1 << (bits-1)) - 1, -(1 << (bits-1))]

def random_value(dtype):
    unsigned, bits = dtype_info(dtype)
    if unsigned:
        return np.random.randint(0, 1<<bits, dtype='int32')
    else:
        return np.random.randint(-(1<<(bits-1)), 1<<(bits-1), dtype='int32')

def load_constant(reg, const):
    if const > -(1 << 11) and const < (1 << 11)-1:
        print(f'addi x{reg}, x0, {const}')
        return 1
    else:
        upper20 = np.uint32(const) >> 12
        lower12 = np.uint32(const) & 0xfff
        if lower12 >= (1 << 11):
            upper20 += 1
        print(f'lui x{reg}, 0x{upper20:x}')
        print(f'addi x{reg}, x{reg}, 0x{lower12:x}')
        return 2

def gen_test_case_r_type(inst, a, b, a_reg, b_reg, dest_reg):
    cycles = 0
    expected = r_type_np_impls[inst](a, b, dtype='int32').astype('int32')
    print(f'# testing {inst} {a}, {b} == {expected}')
    cycles += load_constant(a_reg, a)
    cycles += load_constant(b_reg, b)
    print(f'{inst} x{dest_reg}, x{a_reg}, x{b_reg}')
    cycles += 1
    print(f'## expect[{dest_reg}] = {expected}')
    return cycles

def gen_tests_r_type(inst):
    print(f'## desc = Autogenerated test file for {inst}')
    cycles = 0
    reg = 3
    a_dtype, b_dtype = arg_types[inst]
    print(f'# Edge cases')
    for a, b in itertools.product(edge_values(a_dtype), edge_values(b_dtype)):
        if reg >= 32:
            raise ValueError('Not enough registers for test case.')
        cycles += gen_test_case_r_type(inst, a, b, 1, 2, reg)
        reg += 1
    n_rand = 32 - reg
    print(f'# Random cases (N={n_rand})')
    for _ in range(n_rand):
        a = random_value(a_dtype)
        b = random_value(b_dtype)
        cycles += gen_test_case_r_type(inst, a, b, 1, 2, reg)
        reg += 1
    print('addi x1, x0, 0')
    print('addi x2, x0, 0')
    cycles += 2
    print(f'## cycles = {cycles}')

from contextlib import redirect_stdout

def with_stdout_as_file(filename, thunk):
    with open(filename, 'w') as f:
        with redirect_stdout(f):
            thunk()

def gen_test_case_i_type_r_type(inst, a, imm, a_reg, dest_reg):
    cycles = 0
    expected = r_type_np_impls[inst.rstrip('i')](a, imm, dtype='int32').astype('int32')
    print(f'# testing {inst} {a}, {imm} == {expected}')
    cycles += load_constant(a_reg, a)
    print(f'{inst} x{dest_reg}, x{a_reg}, {imm}')
    cycles += 1
    print(f'## expect[{dest_reg}] = {expected}')
    return cycles

def gen_tests_i_type_r_type(inst):
    print(f'## desc = Autogenerated test file for {inst}')
    cycles = 0
    reg = 2
    a_dtype, imm_dtype = arg_types[inst]
    print(f'# Edge cases')
    for a, imm in itertools.product(edge_values(a_dtype), edge_values(imm_dtype)):
        if reg >= 32:
            raise ValueError('Not enough registers for test case.')
        cycles += gen_test_case_i_type_r_type(inst, a, imm, 1, reg)
        reg += 1
    n_rand = 32 - reg
    print(f'# Random cases (N={n_rand})')
    for _ in range(n_rand):
        a = random_value(a_dtype)
        imm = random_value(imm_dtype)
        cycles += gen_test_case_i_type_r_type(inst, a, imm, 1, reg)
        reg += 1
    print('addi x1, x0, 0')
    cycles += 1
    print(f'## cycles = {cycles}')

i_type_r_type = ['addi', 'andi', 'ori', 'xori', 'slti']

def gen_all_tests():
    for inst in r_type_np_impls.keys():
        with_stdout_as_file('./riscv-tests/' + inst + '_tests.txt', lambda: gen_tests_r_type(inst))
    for inst in i_type_r_type:
        with_stdout_as_file('./riscv-tests/' + inst + '_tests.txt', lambda: gen_tests_i_type_r_type(inst))


# 'lw'
# 'lb'

# 'sw'
# 'sb'

# 'lui'
